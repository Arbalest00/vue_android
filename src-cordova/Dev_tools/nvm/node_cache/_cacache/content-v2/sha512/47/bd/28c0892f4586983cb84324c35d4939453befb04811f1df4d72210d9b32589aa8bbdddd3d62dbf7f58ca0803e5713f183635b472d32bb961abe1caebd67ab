{"_id":"@netflix/nerror","_rev":"10-1f3c67c6f09facb4da591264021ec2ff","name":"@netflix/nerror","dist-tags":{"latest":"1.1.3"},"versions":{"1.0.0":{"name":"@netflix/nerror","version":"1.0.0","main":"lib/index.js","description":"Rich errors","homepage":"https://github.com/Netflix/nerror","repository":{"type":"git","url":"git+https://github.com/Netflix/nerror.git"},"license":"MIT","keywords":["nerror","error","multierror","verror"],"devDependencies":{"chai":"^4.1.2","conventional-changelog-angular":"^5.0.0","conventional-recommended-bump":"^4.0.0","documentation":"^8.0.0","eslint":"^4.19.1","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","mocha":"^5.2.0","nyc":"^12.0.2","prettier":"^1.13.5","unleash":"^2.0.1"},"dependencies":{"assert-plus":"^1.0.0","extsprintf":"^1.4.0","lodash":"^4.17.11"},"scripts":{"test":"make prepush"},"contributors":[{"name":"Alex Liu","email":"DonutEspresso@users.noreply.github.com"},{"name":"Peter Marton","email":"email@martonpeter.com"},{"name":"Peter Marton","email":"pmarton@netflix.com"},{"name":"Joyent"},{"name":"David Pacheco"},{"name":"Trent Mick"},{"name":"cburroughs"},{"name":"Simen Bekkhus"},{"name":"Samer Masterson"}],"gitHead":"c237cd8a342dd6e8776b20be0306f484fb8dce05","bugs":{"url":"https://github.com/Netflix/nerror/issues"},"_id":"@netflix/nerror@1.0.0","_npmVersion":"6.4.1","_nodeVersion":"10.13.0","_npmUser":{"name":"hekike","email":"email@martonpeter.com"},"dist":{"integrity":"sha512-cnIA3+XJYlVbbIhg0aq0o22M9dPhmY8DiqhPMkyr9NYrvVwaMrNhiyCwbzosFDIAjFpnvaMZcIztR4vfthjE7w==","shasum":"e383010a6e5f58edd3bf56316d0a001fbe7c1fe3","tarball":"https://registry.npmjs.org/@netflix/nerror/-/nerror-1.0.0.tgz","fileCount":6,"unpackedSize":40480,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcy1a2CRA9TVsSAnZWagAAoKgQAJX/lCBom75txXT8Ug5z\n7yqRWkUQMVOwMg3vFx2tS9yhhswY1Vq28nkblbwJZZDCoGzIMwR17O63ddFF\n8XsXLOfA8TNVdsuJ0TnhXOHkzNS/ea2OtohhCBSKeddrHwmPVvhfyAiyZnF/\nY7prF2G6pXTSFlgjMxDlTMCFa1zp5x3u2wl8kxqqgGVEqoLeUISN+cskfgdu\nTCAL0R6WylZxRPqagu7NsR49laOi+pW3b0PMCjJkeU8LpILiwBE1mZMosypt\njV5Rs3IcjDfTYHLOJYbGTpKxXdYlq1lFCZtSSzx8pQgFXi5I2K3u6cU3tsAS\nky6Dxg+RgqFJh+76xBvrWM7RtvGWs/BMMeRasukpcS8Nwsd+Z6h5gZLF0TDF\nv2OXULvbtFPj7PTRJ9dj8G+t6TyP3q7JfRnJ7w7cI8rZf/32zL3XUBIt2ac0\nIZL4U8LbFEpzK535GxUt6Jr4I9tXo/P8/4e0lAO/gm+U8s2PMDzh4BMpAWWz\nxqn5aougwNBlNm0AFgbgrsWyUrm/K0Hvs52olOLUBvptjTwPPTnaJzjKto7E\niJ0d1ihGJy4Vpt7dZ4q95rmf37v9a05kNTjQBeTMAY8rmeNxxkSCgomSq+3i\nPThu26AoG9OoiIzDmn4U9iqwzNoH8EpE20wKbRCub3M5zs2aShVzEL3durBc\n1rqo\r\n=k+OE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCnNEk2CXGOudl7+HqgFBB6iJtEOWK2VoZvM6i2R1uPxgIga+nDm6oWYxBvRzSEKvUoi5z0YdPMbDrlpU9awE22TZU="}]},"maintainers":[{"name":"hekike","email":"email@martonpeter.com"},{"name":"ghermeto","email":"gui.hermeto@gmail.com"},{"name":"barb_the_builder","email":"buildtools@netflix.com"},{"name":"gsimpson","email":"gsimpson@netflix.com"},{"name":"tbranyen","email":"tim@tabdeveloper.com"},{"name":"abritinthebay","email":"darkcryst@gmail.com"},{"name":"tvuiops","email":"tvui-npm@netflix.com"},{"name":"tvui","email":"tvui-npm@netflix.com"},{"name":"donutespresso","email":"donutespresso@gmail.com"},{"name":"kaylie","email":"kayliealexa7@gmail.com"},{"name":"kkwon","email":"kkwon@netflix.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nerror_1.0.0_1556829877539_0.8580605118831262"},"_hasShrinkwrap":false},"1.1.0":{"name":"@netflix/nerror","version":"1.1.0","main":"lib/index.js","description":"Rich errors","homepage":"https://github.com/Netflix/nerror","repository":{"type":"git","url":"git+https://github.com/Netflix/nerror.git"},"license":"MIT","keywords":["nerror","error","multierror","verror"],"devDependencies":{"chai":"^4.1.2","conventional-changelog-angular":"^5.0.0","conventional-recommended-bump":"^4.0.0","documentation":"^8.0.0","eslint":"^4.19.1","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","mocha":"^5.2.0","nyc":"^12.0.2","prettier":"^1.13.5","unleash":"^2.0.1"},"dependencies":{"assert-plus":"^1.0.0","extsprintf":"^1.4.0","lodash":"^4.17.11"},"scripts":{"test":"make prepush"},"contributors":[{"name":"Alex Liu","email":"DonutEspresso@users.noreply.github.com"},{"name":"Peter Marton","email":"email@martonpeter.com"},{"name":"Peter Marton","email":"pmarton@netflix.com"},{"name":"Joyent"},{"name":"David Pacheco"},{"name":"Trent Mick"},{"name":"cburroughs"},{"name":"Simen Bekkhus"},{"name":"Samer Masterson"}],"gitHead":"b60600b7ae7d0cd75cf56b900653a121eb2d28f4","bugs":{"url":"https://github.com/Netflix/nerror/issues"},"_id":"@netflix/nerror@1.1.0","_npmVersion":"6.4.1","_nodeVersion":"10.13.0","_npmUser":{"name":"hekike","email":"email@martonpeter.com"},"dist":{"integrity":"sha512-VGB1t59S6j4ZuIaYc7PAtIQ1GgF8xPtwq/pl+VFoyjMP1jDcPgMWcLH9A5ZQEmj5p1CQ/ycN7kReKEny/CjJ8Q==","shasum":"0ab9bdf0c0de6fb565c91af7744099bf8ebe21ba","tarball":"https://registry.npmjs.org/@netflix/nerror/-/nerror-1.1.0.tgz","fileCount":6,"unpackedSize":40671,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc0KgpCRA9TVsSAnZWagAASXcP/ix1RKDQo5yCAMAxCDdK\nnbF6T62Qqd4J96709fIlaxe7UfJDgYe2qx5dqg9hBsvpK0JeLi/QNI9Gov6/\nGheCnmPAkydESdSpIELKmpmUFewcxGazC/pohxD3KSMNPEjg5NjNFCT4fm/1\nQ8VSF5BeuWqhdE5aXSae74nfCyUKwS0dOl1xOFKReswAhuX2S9V8dR6MgWHr\noEF6fIP32l/HLDt/vmejDjQLSr2obM6NpGEvHisw+J7ZNAIkG5pIwhL4eBK+\nG6jTUeHcgb5mLa6jbKFDVSMdR3Ar8xvI2L6bLuq1tDg2rZeeuVdMiKARmppC\nxL5SnVhXvkJ0qaEbfras13rppL+cv1VvpcjhJyZhPi8M3BbV/f5fmckXKz6f\nxZPBK4C1bUCO0XuQuHb5AylJCwPsUAzDiAuP4DbSvnJcebrOyZjhaxoWdndj\nz8scm5vYpRcYBtp1cukt+qXSlcpHy0FcekriF2IjUEsCRiQ4jMYRQbeQ4BU6\nWJI3NMOTvOXbEkH/2dGRZYN9JQjRIdYZENky+6U0gLjeX5HDIt2yZ6qWS3zo\nrNde5uUgUNpIlBSLjeyHGKgV23qN1JDDrtfRnGcVBLh8E1KgULNWGKK5uuYK\nicZCnAkqpiSZ34ul4LUkkYTh/K1+WWLeimzJR58igzOFG1WMJc9miBoJHN1K\nyjlz\r\n=vART\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEH8RBqyyX1mTAE3OX70NfoqvI7Y//44ioEOMvnYRyE8AiBmVNG9n3iHrvhvTI9sxnevTXf/ghbPNpP7Xg1gfaeAOQ=="}]},"maintainers":[{"email":"darkcryst@gmail.com","name":"abritinthebay"},{"email":"npm@netflix.com","name":"barb_the_builder"},{"email":"donutespresso@gmail.com","name":"donutespresso"},{"email":"gui.hermeto@gmail.com","name":"ghermeto"},{"email":"gsimpson@netflix.com","name":"gsimpson"},{"email":"email@martonpeter.com","name":"hekike"},{"email":"kayliealexa7@gmail.com","name":"kaylie"},{"email":"kkwon@netflix.com","name":"kkwon"},{"email":"matheusdot@gmail.com","name":"mmarchini"},{"email":"tim@tabdeveloper.com","name":"tbranyen"},{"email":"tvui-npm@netflix.com","name":"tvui"},{"email":"tvui-npm@netflix.com","name":"tvuiops"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nerror_1.1.0_1557178409033_0.2787127352177481"},"_hasShrinkwrap":false},"1.1.1":{"name":"@netflix/nerror","version":"1.1.1","main":"lib/index.js","description":"Rich errors","homepage":"https://github.com/Netflix/nerror","repository":{"type":"git","url":"git+https://github.com/Netflix/nerror.git"},"license":"MIT","types":"lib/index.d.ts","keywords":["nerror","error","multierror","verror"],"devDependencies":{"chai":"^4.1.2","conventional-changelog-angular":"^5.0.0","conventional-recommended-bump":"^4.0.0","documentation":"^8.0.0","eslint":"^4.19.1","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","mocha":"^5.2.0","nyc":"^12.0.2","prettier":"^1.13.5","tsd":"^0.7.3","unleash":"^2.0.1"},"dependencies":{"assert-plus":"^1.0.0","extsprintf":"^1.4.0","lodash":"^4.17.11"},"scripts":{"test":"make prepush & tsd"},"tsd":{"directory":"test"},"contributors":[{"name":"Alex Liu","email":"DonutEspresso@users.noreply.github.com"},{"name":"Peter Marton","email":"email@martonpeter.com"},{"name":"Peter Marton","email":"pmarton@netflix.com"},{"name":"Joyent"},{"name":"David Pacheco"},{"name":"Trent Mick"},{"name":"cburroughs"},{"name":"Simen Bekkhus"},{"name":"Samer Masterson"}],"gitHead":"24998c5cdefa35ad98c2f8f0edc7b02b99d3fb3a","bugs":{"url":"https://github.com/Netflix/nerror/issues"},"_id":"@netflix/nerror@1.1.1","_nodeVersion":"10.16.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-sPUiwZ9LjNDZSNpIFWHjCjDWfcyRuXW+36gGUelgXa3B4VirvXEf8lL1yEQqLsX85EuqzeQI+eEr/dbP5FFoWg==","shasum":"deef87ff6486f0175b5e5ee921267928233bbdb5","tarball":"https://registry.npmjs.org/@netflix/nerror/-/nerror-1.1.1.tgz","fileCount":7,"unpackedSize":42950,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdJS6MCRA9TVsSAnZWagAA2C8QAIg91N4/dB3XQyi/BM5r\nQVor+TJZGgTYktSuNVhPyGx+kR3Oo3pTavsfK0cojpFVW8KG/0xYRqPvPGBz\nvPKPDqyfDxaJDULRl/BitBjkH113faAvMGUy3SnzwFnntCT/5ctpMkAKYu7r\nYkCMnIT0iVaL7Jb7vL/NYzKoK3bzBCTcjD8H+ZgsbiIQj+Aewk4VbVrdKNBn\nVNP9YWGrihCEWfg0VE5mBbQLX+y5n16dnOPGCZkvo4IzHZzzIJd03++faese\n8KNiX+6d6h/oL4NZHf/X9br09LsHiEU9VpBKzRlShe7DQr7feBRl+rS00E9+\nPFdlRPscseXpLuF43uWO4uqmJifqE9pu18jlMqHobiBQOlLhIpEsZwzaC1k+\npgXyZ7PzFGWIXs+Ikr4losQqjvP6BtnW49XrFQC7PEeuc411ObcyEQqFDWAi\nWsmqqVem8IIw1tP7WvxW0Kz6DW0r+akA3kPa7YShjaF7wyEgVovZ3KwWDHJx\nfAlVpvXbSw+OyH/kZg8LXeiHM3wkcGrHl2PHcrHTTIdjIzsiISkzcNoodn/r\nQsbrrCid9VrBO3kVcq+nCOhv2VnUnXHW9lw87uyVe5qffDlkTVC1PxZuhY1Z\nD+j1BmY5vGOmazzm7hlkdK3eIM3MW5c9np6k1cWgs73g99qXOgTCxGodl+6e\nLQ+O\r\n=Vq/M\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBjE90z8ccN/TgChkbt52y/b5UCoTPGiAWk15TtJzoUHAiEAsZitG2v/320beOwYo3sgKlDbtCL7MtKNO4kFkjJivxM="}]},"maintainers":[{"email":"darkcryst@gmail.com","name":"abritinthebay"},{"email":"npm@netflix.com","name":"barb_the_builder"},{"email":"donutespresso@gmail.com","name":"donutespresso"},{"email":"gui.hermeto@gmail.com","name":"ghermeto"},{"email":"gsimpson@netflix.com","name":"gsimpson"},{"email":"email@martonpeter.com","name":"hekike"},{"email":"kayliealexa7@gmail.com","name":"kaylie"},{"email":"kkwon@netflix.com","name":"kkwon"},{"email":"matheusdot@gmail.com","name":"mmarchini"},{"email":"tim@tabdeveloper.com","name":"tbranyen"},{"email":"tvui-npm@netflix.com","name":"tvui"},{"email":"tvui-npm@netflix.com","name":"tvuiops"}],"_npmUser":{"name":"hekike","email":"email@martonpeter.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nerror_1.1.1_1562717835392_0.8006027334263572"},"_hasShrinkwrap":false},"1.1.2":{"name":"@netflix/nerror","version":"1.1.2","main":"lib/index.js","description":"Rich errors","homepage":"https://github.com/Netflix/nerror","repository":{"type":"git","url":"git+https://github.com/Netflix/nerror.git"},"license":"MIT","types":"lib/index.d.ts","keywords":["nerror","error","multierror","verror"],"devDependencies":{"chai":"^4.1.2","conventional-changelog-angular":"^5.0.0","conventional-recommended-bump":"^4.0.0","documentation":"^8.0.0","eslint":"^4.19.1","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","mocha":"^5.2.0","nyc":"^12.0.2","prettier":"^1.13.5","tsd":"^0.7.3","unleash":"^2.0.1"},"dependencies":{"assert-plus":"^1.0.0","extsprintf":"^1.4.0","lodash":"^4.17.15"},"scripts":{"test":"make prepush & tsd"},"tsd":{"directory":"test"},"contributors":[{"name":"Alex Liu","email":"DonutEspresso@users.noreply.github.com"},{"name":"Peter Marton","email":"email@martonpeter.com"},{"name":"Peter Marton","email":"pmarton@netflix.com"},{"name":"Joyent"},{"name":"David Pacheco"},{"name":"Trent Mick"},{"name":"cburroughs"},{"name":"Simen Bekkhus"},{"name":"Samer Masterson"}],"gitHead":"eca0fbe2e5631a8824c9ee8509dcc1655427bd09","bugs":{"url":"https://github.com/Netflix/nerror/issues"},"_id":"@netflix/nerror@1.1.2","_nodeVersion":"10.16.0","_npmVersion":"6.10.1","dist":{"integrity":"sha512-c01MmkM3Oi0BkTV4odMpr+58uXlxRKUPcu1ONR+sU3YAFAW4pP1j2b0opS9jX+an3ldpBJtiompzAEFZdlc8YQ==","shasum":"4b82eb4d168e97edb52b9834b0dde8ebf38684c1","tarball":"https://registry.npmjs.org/@netflix/nerror/-/nerror-1.1.2.tgz","fileCount":7,"unpackedSize":42997,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdO6lICRA9TVsSAnZWagAAbtQP/1B8gtkMg670qjo9vLpt\nTgHFYugC9XdXKS8BLmshuTXQSH67MlOwmFk7EvgMrcWZcjIgG83NXg2KYbjB\nN+p9gDVZdRUBtKt8YQZElfQdKEJIhWhs3i7TdLqepXsaZ5jzno4PLpdUQIs4\nkaegyf+svfexfcYAiAMbBA/hf4+QsH6Ou6o8JBkbHytt3nRj+FLJ8HjPGEkF\ni4ZXiTz7DQ4eGOmW6OnfMQJ84HSgAv3MKIL4TrRJTZzhbViAEj+OyXPx55/G\n1c2NuhIyiccXN8uGmUociATfLLm3QsvQEYuvdBycWtsJpANMa+3CwzPoLcHS\nRT47mSm7k1Ipq9l8noBk0THxAYmIrqzmoIConpE73uR8htM6V6+XBSQRnq0f\n7arZ1fWDV2+PY1AuBZwRisfjBzJ5pZ8nIDFWD587OSHEjzV76UGl5yyGqN04\ntE4E/0INSwyR6qOrltaRXOFTWcp73m5238Nn5v/SseUHPHXajpA868CVziFh\nAuZhKlY9DsEtKlxXwNmlk0recpnotI4PvO19Wm983Gw5yUQuVPXFLlFZ2KkX\niEdZvHA6eBaTYnWceR84hqeJG94Ly5phYK2AEIiEyiVy8RwMIGntXdUAGSkB\nMpCq/9Uo97/PeHt0Aoi+8gDE/sd+QBvISRWLTnhXl0aNeg0qbTxp5EqsKt8b\nvKf4\r\n=xBat\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHIW+UYM+1M/1Y8RBi0x7SjQpZT0L8YwHjRv/XFWKfexAiEAy3rEpkNiZ3O9sg89Pt+exjvz6rq1BcrQVlTpBeh+lug="}]},"maintainers":[{"email":"darkcryst@gmail.com","name":"abritinthebay"},{"email":"npm@netflix.com","name":"barb_the_builder"},{"email":"donutespresso@gmail.com","name":"donutespresso"},{"email":"gui.hermeto@gmail.com","name":"ghermeto"},{"email":"gsimpson@netflix.com","name":"gsimpson"},{"email":"email@martonpeter.com","name":"hekike"},{"email":"kayliealexa7@gmail.com","name":"kaylie"},{"email":"kkwon@netflix.com","name":"kkwon"},{"email":"matheusdot@gmail.com","name":"mmarchini"},{"email":"tim@tabdeveloper.com","name":"tbranyen"},{"email":"tvui-npm@netflix.com","name":"tvui"},{"email":"tvui-npm@netflix.com","name":"tvuiops"}],"_npmUser":{"name":"donutespresso","email":"donutespresso@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nerror_1.1.2_1564191047645_0.3824730618718166"},"_hasShrinkwrap":false},"1.1.3":{"name":"@netflix/nerror","version":"1.1.3","main":"lib/index.js","description":"Rich errors","homepage":"https://github.com/Netflix/nerror","repository":{"type":"git","url":"git+https://github.com/Netflix/nerror.git"},"license":"MIT","types":"lib/index.d.ts","keywords":["nerror","error","multierror","verror"],"devDependencies":{"chai":"^4.1.2","conventional-changelog-angular":"^5.0.0","conventional-recommended-bump":"^4.0.0","documentation":"^8.0.0","eslint":"^4.19.1","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","mocha":"^5.2.0","nyc":"^12.0.2","prettier":"^1.13.5","tsd":"^0.7.3","unleash":"^2.0.1"},"dependencies":{"assert-plus":"^1.0.0","extsprintf":"^1.4.0","lodash":"^4.17.15"},"scripts":{"test":"make prepush & tsd"},"tsd":{"directory":"test"},"contributors":[{"name":"Alex Liu","email":"DonutEspresso@users.noreply.github.com"},{"name":"Peter Marton","email":"email@martonpeter.com"},{"name":"Peter Marton","email":"pmarton@netflix.com"},{"name":"Joyent"},{"name":"David Pacheco"},{"name":"Trent Mick"},{"name":"cburroughs"},{"name":"Simen Bekkhus"},{"name":"Samer Masterson"}],"gitHead":"e6d624ce0f3e1a60acdd3af1d8dedc9bc745b656","bugs":{"url":"https://github.com/Netflix/nerror/issues"},"_id":"@netflix/nerror@1.1.3","_nodeVersion":"10.16.0","_npmVersion":"6.12.0","dist":{"integrity":"sha512-b+MGNyP9/LXkapreJzNUzcvuzZslj/RGgdVVJ16P2wSlYatfLycPObImqVJSmNAdyeShvNeM/pl3sVZsObFueg==","shasum":"9d88eccca442f1d544f2761d15ea557dc0a44ed2","tarball":"https://registry.npmjs.org/@netflix/nerror/-/nerror-1.1.3.tgz","fileCount":7,"unpackedSize":43306,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd3tFZCRA9TVsSAnZWagAAFhIP+wRDSXHnoEmTVs+fTqwR\nrsDbA/BmNwdUvDBOPzIWO2oOfKduOYZCerkvWXebxJls4LMEOO81y22wzRxh\noMXl17uEKuGfObOdwSe7NVlP3FOS3DkzoQCJtNVtcbrEhwpJKffxVT3glhsF\nXBhX00N8GWdkqMgleWR09YItaJ7VPwwhf6djInjbP5EpLtajQ6jilfNB5P46\n4KKMyg6Yuey5/ZsmMZg1nkH/AK4WMk6JZl+4VH2OWNkbgQFjirMMHxDzixuE\n/RorHvwhJJlr99ZMMqIO+H66qAMifXPDkEOpazsGCPxda5roAGQNCWqSuWvQ\nLR/ZLOXflH+4mXNWO1CV+Owjty4FjHIogTQCj3hLPHhHkUi3aDiuBRyn7xpe\nMLoZF18ovbhj7zB9JqiplGmuYlHAK/rDjz3HEZdRGIZuptvYlYsmfylX6H1G\nd2Lkm9qUa7CbPHIHA23XWnlpHYZ9g/jrjLweOouqFcPo0eRbriYKiTDKSqSy\n4Tt1ztyqNIpxhw2Yu0umeQzX+mJgggF781G+iCMNWTl7WJ136vDRtC1tDljH\nRd3mVw4/MYlQF0afMHcu+kzLjgqqeXgWKUHV69OTbLgY2MFAVyi9VieJQxpM\nCUOTDSs3KfCYmLPfNVwQUuBxzfyHgDM9Jfbfa856plRKEIWSr121dXIIY+Tm\nIbbT\r\n=nZII\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDIPligkCoCpbKCrpXcZjzl2RKlO6Q/2vo1po27y4k7YQIgNB/bnUfIIgJncrHYWJgkZa1oWX076hVMFrXmEb/L9ZA="}]},"maintainers":[{"email":"darkcryst@gmail.com","name":"abritinthebay"},{"email":"npm@netflix.com","name":"barb_the_builder"},{"email":"donutespresso@gmail.com","name":"donutespresso"},{"email":"gui.hermeto@gmail.com","name":"ghermeto"},{"email":"gsimpson@netflix.com","name":"gsimpson"},{"email":"email@martonpeter.com","name":"hekike"},{"email":"kayliealexa7@gmail.com","name":"kaylie"},{"email":"kkwon@netflix.com","name":"kkwon"},{"email":"matheusdot@gmail.com","name":"mmarchini"},{"email":"tim@tabdeveloper.com","name":"tbranyen"},{"email":"tvui-npm@netflix.com","name":"tvui"},{"email":"tvui-npm@netflix.com","name":"tvuiops"}],"_npmUser":{"name":"hekike","email":"email@martonpeter.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nerror_1.1.3_1574883672939_0.6018803222449305"},"_hasShrinkwrap":false}},"time":{"created":"2019-05-02T20:44:37.344Z","1.0.0":"2019-05-02T20:44:37.703Z","modified":"2022-04-06T08:13:30.368Z","1.1.0":"2019-05-06T21:33:29.179Z","1.1.1":"2019-07-10T00:17:15.511Z","1.1.2":"2019-07-27T01:30:47.794Z","1.1.3":"2019-11-27T19:41:13.055Z"},"maintainers":[{"email":"kkwon@netflix.com","name":"kkwon"},{"email":"kayliealexa7@gmail.com","name":"kaylie"},{"email":"donutespresso@gmail.com","name":"donutespresso"},{"email":"tim@tabdeveloper.com","name":"tbranyen"},{"email":"tvui-npm@netflix.com","name":"tvui-user"},{"email":"tvui-npm@netflix.com","name":"tvuiops-user"},{"email":"gsimpson@netflix.com","name":"gsimpson"},{"email":"npm@netflix.com","name":"barb_the_builder"},{"email":"oss@mmarchini.me","name":"mmarchini"},{"email":"wes@wesleytodd.com","name":"wesleytodd"}],"description":"Rich errors","homepage":"https://github.com/Netflix/nerror","keywords":["nerror","error","multierror","verror"],"repository":{"type":"git","url":"git+https://github.com/Netflix/nerror.git"},"contributors":[{"name":"Alex Liu","email":"DonutEspresso@users.noreply.github.com"},{"name":"Peter Marton","email":"email@martonpeter.com"},{"name":"Peter Marton","email":"pmarton@netflix.com"},{"name":"Joyent"},{"name":"David Pacheco"},{"name":"Trent Mick"},{"name":"cburroughs"},{"name":"Simen Bekkhus"},{"name":"Samer Masterson"}],"bugs":{"url":"https://github.com/Netflix/nerror/issues"},"license":"MIT","readme":"# nerror: rich JavaScript errors\n\n[![Build Status](https://travis-ci.org/Netflix/nerror.svg?branch=master)](https://travis-ci.org/Netflix/nerror)\n\n*Netflix services uses [VError](https://github.com/joyent/node-verror) to make\noperation of Node.js applications easier  through meaningful error chains.\nVError is an amazing library by Joyent and we  are glad for all the hard work\nfor the contributors made during the years.\nIn early 2019 Netflix error handling requirements started to broaden enough that\nwe had to find a way to make quick iterations on VError with minimizing the\nchurn on existing VError customers. As a result of this we decided to fork\nVError as NError. We hope in the future after the initial development period we\ncan seek convergence between the two projects.*\n\nThis module provides several classes in support of Joyent's [Best Practices for\nError Handling in Node.js](http://www.joyent.com/developers/node/design/errors).\nIf you find any of the behavior here confusing or surprising, check out that\ndocument first.\n\n## API\n\nSee [API](/api.md)\n\n## Classes\n\nThe error classes here support:\n\n* printf-style arguments for the message\n* chains of causes\n* properties to provide extra information about the error\n* creating your own subclasses that support all of these\n\nThe classes here are:\n\n* **VError**, for chaining errors while preserving each one's error message.\n  This is useful in servers and command-line utilities when you want to\n  propagate an error up a call stack, but allow various levels to add their own\n  context.  See examples below.\n* **WError**, for wrapping errors while hiding the lower-level messages from the\n  top-level error.  This is useful for API endpoints where you don't want to\n  expose internal error messages, but you still want to preserve the error chain\n  for logging and debugging.\n* **PError**, which is just like VError but does not interpret printf-style\n  arguments at all.\n* **SError**, which is just like VError but interprets printf-style arguments\n  more strictly.\n* **MultiError**, which is just an Error that encapsulates one or more other\n  errors.  (This is used for parallel operations that return several errors.)\n\nFor the full list of features see [API](/api.md).\n\n## Quick start\n\nFirst, install the package:\n\n    npm install @netflix/nerror\n\nIf nothing else, you can use VError as a drop-in replacement for the built-in\nJavaScript Error class, with the addition of printf-style messages:\n\n```javascript\nconst { VError } = require('@netflix/nerror');\nconst err = new VError('missing file: \"%s\"', '/etc/passwd');\nconsole.log(err.message);\n```\n\nThis prints:\n\n    missing file: \"/etc/passwd\"\n\nYou can also pass a `cause` argument, which is any other Error object:\n\n```javascript\nconst fs = require('fs');\nconst filename = '/nonexistent';\nfs.stat(filename, function (err1) {\n\tconst err2 = new VError(err1, 'stat \"%s\"', filename);\n\tconsole.error(err2.message);\n});\n```\n\nThis prints out:\n\n    stat \"/nonexistent\": ENOENT, stat '/nonexistent'\n\nwhich resembles how Unix programs typically report errors:\n\n    $ sort /nonexistent\n    sort: open failed: /nonexistent: No such file or directory\n\nTo match the Unixy feel, when you print out the error, just prepend the\nprogram's name to the VError's `message`.  Or just call\n[node-cmdutil.fail(your_verror)](https://github.com/joyent/node-cmdutil), which\ndoes this for you.\n\nYou can get the next-level Error using `err.cause()`:\n\n```javascript\nconsole.error(err2.cause().message);\n```\n\nprints:\n\n    ENOENT, stat '/nonexistent'\n\nOf course, you can chain these as many times as you want, and it works with any\nkind of Error:\n\n```javascript\nconst err1 = new Error('No such file or directory');\nconst err2 = new VError(err1, 'failed to stat \"%s\"', '/junk');\nconst err3 = new VError(err2, 'request failed');\nconsole.error(err3.message);\n```\n\nThis prints:\n\n    request failed: failed to stat \"/junk\": No such file or directory\n\nThe idea is that each layer in the stack annotates the error with a description\nof what it was doing.  The end result is a message that explains what happened\nat each level.\n\nYou can also decorate Error objects with additional information so that callers\ncan not only handle each kind of error differently, but also construct their own\nerror messages (e.g., to localize them, format them, group them by type, and so\non).  See the example below.\n\n\n## Deeper dive\n\nThe two main goals for VError are:\n\n* **Make it easy to construct clear, complete error messages intended for\n  people.**  Clear error messages greatly improve both user experience and\n  debuggability, so we wanted to make it easy to build them.  That's why the\n  constructor takes printf-style arguments.\n* **Make it easy to construct objects with programmatically-accessible\n  metadata** (which we call _informational properties_).  Instead of just saying\n  \"connection refused while connecting to 192.168.1.2:80\", you can add\n  properties like `\"ip\": \"192.168.1.2\"` and `\"tcpPort\": 80`.  This can be used\n  for feeding into monitoring systems, analyzing large numbers of Errors (as\n  from a log file), or localizing error messages.\n\nTo really make this useful, it also needs to be easy to compose Errors:\nhigher-level code should be able to augment the Errors reported by lower-level\ncode to provide a more complete description of what happened.  Instead of saying\n\"connection refused\", you can say \"operation X failed: connection refused\".\nThat's why VError supports `causes`.\n\nIn order for all this to work, programmers need to know that it's generally safe\nto wrap lower-level Errors with higher-level ones.  If you have existing code\nthat handles Errors produced by a library, you should be able to wrap those\nErrors with a VError to add information without breaking the error handling\ncode.  There are two obvious ways that this could break such consumers:\n\n* The error's name might change.  People typically use `name` to determine what\n  kind of Error they've got.  To ensure compatibility, you can create VErrors\n  with custom names, but this approach isn't great because it prevents you from\n  representing complex failures.  For this reason, VError provides\n  `findCauseByName`, which essentially asks: does this Error _or any of its\n  causes_ have this specific type?  If error handling code uses\n  `findCauseByName`, then subsystems can construct very specific causal chains\n  for debuggability and still let people handle simple cases easily.  There's an\n  example below.\n* The error's properties might change.  People often hang additional properties\n  off of Error objects.  If we wrap an existing Error in a new Error, those\n  properties would be lost unless we copied them.  But there are a variety of\n  both standard and non-standard Error properties that should _not_ be copied in\n  this way: most obviously `name`, `message`, and `stack`, but also `fileName`,\n  `lineNumber`, and a few others.  Plus, it's useful for some Error subclasses\n  to have their own private properties -- and there'd be no way to know whether\n  these should be copied.  For these reasons, VError first-classes these\n  information properties.  You have to provide them in the constructor, you can\n  only fetch them with the `info()` function, and VError takes care of making\n  sure properties from causes wind up in the `info()` output.\n\nLet's put this all together with an example from the node-fast RPC library.\nnode-fast implements a simple RPC protocol for Node programs.  There's a server\nand client interface, and clients make RPC requests to servers.  Let's say the\nserver fails with an UnauthorizedError with message \"user 'bob' is not\nauthorized\".  The client wraps all server errors with a FastServerError.  The\nclient also wraps all request errors with a FastRequestError that includes the\nname of the RPC call being made.  The result of this failed RPC might look like\nthis:\n\n    name: FastRequestError\n    message: \"request failed: server error: user 'bob' is not authorized\"\n    rpcMsgid: <unique identifier for this request>\n    rpcMethod: GetObject\n    cause:\n        name: FastServerError\n        message: \"server error: user 'bob' is not authorized\"\n        cause:\n            name: UnauthorizedError\n            message: \"user 'bob' is not authorized\"\n            rpcUser: \"bob\"\n\nWhen the caller uses `VError.info()`, the information properties are collapsed\nso that it looks like this:\n\n    message: \"request failed: server error: user 'bob' is not authorized\"\n    rpcMsgid: <unique identifier for this request>\n    rpcMethod: GetObject\n    rpcUser: \"bob\"\n\nTaking this apart:\n\n* The error's message is a complete description of the problem.  The caller can\n  report this directly to its caller, which can potentially make its way back to\n  an end user (if appropriate).  It can also be logged.\n* The caller can tell that the request failed on the server, rather than as a\n  result of a client problem (e.g., failure to serialize the request), a\n  transport problem (e.g., failure to connect to the server), or something else\n  (e.g., a timeout).  They do this using `findCauseByName('FastServerError')`\n  rather than checking the `name` field directly.\n* If the caller logs this error, the logs can be analyzed to aggregate\n  errors by cause, by RPC method name, by user, or whatever.  Or the\n  error can be correlated with other events for the same rpcMsgid.\n* It wasn't very hard for any part of the code to contribute to this Error.\n  Each part of the stack has just a few lines to provide exactly what it knows,\n  with very little boilerplate.\n\nIt's not expected that you'd use these complex forms all the time.  Despite\nsupporting the complex case above, you can still just do:\n\n   new VError(\"my service isn't working\");\n\nfor the simple cases.\n\n\n## Examples\n\nThe \"Demo\" section above covers several basic cases.  Here's a more advanced\ncase:\n\n```javascript\nconst err1 = new VError('something bad happened');\n/* ... */\nconst err2 = new VError({\n    'name': 'ConnectionError',\n    'cause': err1,\n    'info': {\n        'errno': 'ECONNREFUSED',\n        'remote_ip': '127.0.0.1',\n        'port': 215\n    }\n}, 'failed to connect to \"%s:%d\"', '127.0.0.1', 215);\n\nconsole.log(err2.message);\nconsole.log(err2.name);\nconsole.log(VError.info(err2));\nconsole.log(err2.stack);\n```\n\nThis outputs:\n\n    failed to connect to \"127.0.0.1:215\": something bad happened\n    ConnectionError\n    { errno: 'ECONNREFUSED', remote_ip: '127.0.0.1', port: 215 }\n    ConnectionError: failed to connect to \"127.0.0.1:215\": something bad happened\n        at Object.<anonymous> (/home/dap/node-verror/examples/info.js:5:12)\n        at Module._compile (module.js:456:26)\n        at Object.Module._extensions..js (module.js:474:10)\n        at Module.load (module.js:356:32)\n        at Function.Module._load (module.js:312:12)\n        at Function.Module.runMain (module.js:497:10)\n        at startup (node.js:119:16)\n        at node.js:935:3\n\nInformation properties are inherited up the cause chain, with values at the top\nof the chain overriding same-named values lower in the chain.  To continue that\nexample:\n\n```javascript\nconst err3 = new VError({\n    'name': 'RequestError',\n    'cause': err2,\n    'info': {\n        'errno': 'EBADREQUEST'\n    }\n}, 'request failed');\n\nconsole.log(err3.message);\nconsole.log(err3.name);\nconsole.log(VError.info(err3));\nconsole.log(err3.stack);\n```\n\nThis outputs:\n\n    request failed: failed to connect to \"127.0.0.1:215\": something bad happened\n    RequestError\n    { errno: 'EBADREQUEST', remote_ip: '127.0.0.1', port: 215 }\n    RequestError: request failed: failed to connect to \"127.0.0.1:215\": something bad happened\n        at Object.<anonymous> (/home/dap/node-verror/examples/info.js:20:12)\n        at Module._compile (module.js:456:26)\n        at Object.Module._extensions..js (module.js:474:10)\n        at Module.load (module.js:356:32)\n        at Function.Module._load (module.js:312:12)\n        at Function.Module.runMain (module.js:497:10)\n        at startup (node.js:119:16)\n        at node.js:935:3\n\nYou can also print the complete stack trace of combined `Error`s by using\n`VError.fullStack(err).`\n\n```javascript\nconst err1 = new VError('something bad happened');\n/* ... */\nconst err2 = new VError(err1, 'something really bad happened here');\n\nconsole.log(VError.fullStack(err2));\n```\n\nThis outputs:\n\n    VError: something really bad happened here: something bad happened\n        at Object.<anonymous> (/home/dap/node-verror/examples/fullStack.js:5:12)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:968:3\n    caused by: VError: something bad happened\n        at Object.<anonymous> (/home/dap/node-verror/examples/fullStack.js:3:12)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:968:3\n\n`VError.fullStack` is also safe to use on regular `Error`s, so feel free to use\nit whenever you need to extract the stack trace from an `Error`, regardless if\nit's a `VError` or not.\n","readmeFilename":"README.md"}